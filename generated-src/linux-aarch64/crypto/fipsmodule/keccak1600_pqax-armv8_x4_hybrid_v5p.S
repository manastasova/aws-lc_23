// This file is generated from a similarly-named Perl script in the BoringSSL
// source tree. Do not edit by hand.

#if !defined(__has_feature)
#define __has_feature(x) 0
#endif
#if __has_feature(memory_sanitizer) && !defined(OPENSSL_NO_ASM)
#define OPENSSL_NO_ASM
#endif

#if !defined(OPENSSL_NO_ASM) && defined(__AARCH64EL__) && defined(__ELF__)
#if defined(BORINGSSL_PREFIX)
#include <boringssl_prefix_symbols_asm.h>
#endif

#define SEP ;
#include <openssl/arm_arch.h>
.type	round_constants, %object
round_constants:
.quad	0x0000000000000001
.quad	0x0000000000008082
.quad	0x800000000000808a
.quad	0x8000000080008000
.quad	0x000000000000808b
.quad	0x0000000080000001
.quad	0x8000000080008081
.quad	0x8000000000008009
.quad	0x000000000000008a
.quad	0x0000000000000088
.quad	0x0000000080008009
.quad	0x000000008000000a
.quad	0x000000008000808b
.quad	0x800000000000008b
.quad	0x8000000000008089
.quad	0x8000000000008003
.quad	0x8000000000008002
.quad	0x8000000000000080
.quad	0x000000000000800a
.quad	0x800000008000000a
.quad	0x8000000080008081
.quad	0x8000000000008080
.quad	0x0000000080000001
.quad	0x8000000080008008
.size	round_constants, .-round_constants

.type	round_constants_vec, %object
round_constants_vec:
.quad	0x0000000000000001
.quad	0x0000000000000001
.quad	0x0000000000008082
.quad	0x0000000000008082
.quad	0x800000000000808a
.quad	0x800000000000808a
.quad	0x8000000080008000
.quad	0x8000000080008000
.quad	0x000000000000808b
.quad	0x000000000000808b
.quad	0x0000000080000001
.quad	0x0000000080000001
.quad	0x8000000080008081
.quad	0x8000000080008081
.quad	0x8000000000008009
.quad	0x8000000000008009
.quad	0x000000000000008a
.quad	0x000000000000008a
.quad	0x0000000000000088
.quad	0x0000000000000088
.quad	0x0000000080008009
.quad	0x0000000080008009
.quad	0x000000008000000a
.quad	0x000000008000000a
.quad	0x000000008000808b
.quad	0x000000008000808b
.quad	0x800000000000008b
.quad	0x800000000000008b
.quad	0x8000000000008089
.quad	0x8000000000008089
.quad	0x8000000000008003
.quad	0x8000000000008003
.quad	0x8000000000008002
.quad	0x8000000000008002
.quad	0x8000000000000080
.quad	0x8000000000000080
.quad	0x000000000000800a
.quad	0x000000000000800a
.quad	0x800000008000000a
.quad	0x800000008000000a
.quad	0x8000000080008081
.quad	0x8000000080008081
.quad	0x8000000000008080
.quad	0x8000000000008080
.quad	0x0000000080000001
.quad	0x0000000080000001
.quad	0x8000000080008008
.quad	0x8000000080008008
.size	round_constants_vec, .-round_constants_vec



	input_addr	.req x0
	const_addr	.req x29
	count	.req w27
	out_count	.req w27
	cur_const	.req x26

	/*	Mapping of Kecck-f1600 SIMD state to vector registers
	*	at the beginning and end of each round. */

	/*	Mapping of Kecck-f1600 state to vector registers
	*	at the beginning and end of each round. */
	vAba	.req v0
	vAbe	.req v1
	vAbi	.req v2
	vAbo	.req v3
	vAbu	.req v4
	vAga	.req v5
	vAge	.req v6
	vAgi	.req v7
	vAgo	.req v8
	vAgu	.req v9
	vAka	.req v10
	vAke	.req v11
	vAki	.req v12
	vAko	.req v13
	vAku	.req v14
	vAma	.req v15
	vAme	.req v16
	vAmi	.req v17
	vAmo	.req v18
	vAmu	.req v19
	vAsa	.req v20
	vAse	.req v21
	vAsi	.req v22
	vAso	.req v23
	vAsu	.req v24


	vAbaq	.req q0
	vAbeq	.req q1
	vAbiq	.req q2
	vAboq	.req q3
	vAbuq	.req q4
	vAgaq	.req q5
	vAgeq	.req q6
	vAgiq	.req q7
	vAgoq	.req q8
	vAguq	.req q9
	vAkaq	.req q10
	vAkeq	.req q11
	vAkiq	.req q12
	vAkoq	.req q13
	vAkuq	.req q14
	vAmaq	.req q15
	vAmeq	.req q16
	vAmiq	.req q17
	vAmoq	.req q18
	vAmuq	.req q19
	vAsaq	.req q20
	vAseq	.req q21
	vAsiq	.req q22
	vAsoq	.req q23
	vAsuq	.req q24


	C0	.req v27
	C1	.req v28
	C2	.req v29
	C3	.req v30
	C4	.req v31

	C0q	.req q27
	C1q	.req q28
	C2q	.req q29
	C3q	.req q30
	C4q	.req q31


	vBba	.req v25 // fresh
	vBbe	.req v26 // fresh
	vBbi	.req vAbi
	vBbo	.req vAbo
	vBbu	.req vAbu
	vBga	.req vAka
	vBge	.req vAke
	vBgi	.req vAgi
	vBgo	.req vAgo
	vBgu	.req vAgu
	vBka	.req vAma
	vBke	.req vAme
	vBki	.req vAki
	vBko	.req vAko
	vBku	.req vAku
	vBma	.req vAsa
	vBme	.req vAse
	vBmi	.req vAmi
	vBmo	.req vAmo
	vBmu	.req vAmu
	vBsa	.req vAba
	vBse	.req vAbe
	vBsi	.req vAsi
	vBso	.req vAso
	vBsu	.req vAsu

	vBbaq	.req q25 // fresh
	vBbeq	.req q26 // fresh
	vBbiq	.req vAbiq
	vBboq	.req vAboq
	vBbuq	.req vAbuq
	vBgaq	.req vAkaq
	vBgeq	.req vAkeq
	vBgiq	.req vAgiq
	vBgoq	.req vAgoq
	vBguq	.req vAguq
	vBkaq	.req vAmaq
	vBkeq	.req vAmeq
	vBkiq	.req vAkiq
	vBkoq	.req vAkoq
	vBkuq	.req vAkuq
	vBmaq	.req vAsaq
	vBmeq	.req vAseq
	vBmiq	.req vAmiq
	vBmoq	.req vAmoq
	vBmuq	.req vAmuq
	vBsaq	.req vAbaq
	vBseq	.req vAbeq
	vBsiq	.req vAsiq
	vBsoq	.req vAsoq
	vBsuq	.req vAsuq


	E0	.req C4
	E1	.req C0
	E2	.req vBbe // fresh
	E3	.req C2
	E4	.req C3

	E0q	.req C4q
	E1q	.req C0q
	E2q	.req vBbeq // fresh
	E3q	.req C2q
	E4q	.req C3q

	/*	Mapping of Kecck-f1600 state to scalar registers
	*	at the beginning and end of each round. */
	s_Aba	.req x1
	sAbe	.req x6
	sAbi	.req x11
	sAbo	.req x16
	sAbu	.req x21
	sAga	.req x2
	sAge	.req x7
	sAgi	.req x12
	sAgo	.req x17
	sAgu	.req x22
	sAka	.req x3
	sAke	.req x8
	sAki	.req x13
	sAko	.req x18
	sAku	.req x23
	sAma	.req x4
	sAme	.req x9
	sAmi	.req x14
	sAmo	.req x19
	sAmu	.req x24
	sAsa	.req x5
	sAse	.req x10
	sAsi	.req x15
	sAso	.req x20
	sAsu	.req x25


	s_Aba_	.req x0
	sAbe_	.req x28
	sAbi_	.req x11
	sAbo_	.req x16
	sAbu_	.req x21
	sAga_	.req x3
	sAge_	.req x8
	sAgi_	.req x12
	sAgo_	.req x17
	sAgu_	.req x22
	sAka_	.req x4
	sAke_	.req x9
	sAki_	.req x13
	sAko_	.req x18
	sAku_	.req x23
	sAma_	.req x5
	sAme_	.req x10
	sAmi_	.req x14
	sAmo_	.req x19
	sAmu_	.req x24
	sAsa_	.req x1
	sAse_	.req x6
	sAsi_	.req x15
	sAso_	.req x20
	sAsu_	.req x25



	sC0	.req x0
	sE0	.req x29
	sC1	.req x26
	sE1	.req x30
	sC2	.req x27
	sE2	.req x26
	sC3	.req x28
	sE3	.req x27
	sC4	.req x29
	sE4	.req x28

	tmp	.req x30





.macro	load_constant_ptr
	adr	const_addr, round_constants
.endm
.macro	eor3_m1_0 d s0 s1 s2
	eor	\d\().16b, \s0\().16b, \s1\().16b
.endm

.macro	eor2 d s0 s1
	eor	\d\().16b, \s0\().16b, \s1\().16b
.endm

.macro	eor3_m1_1 d s0 s1 s2
	eor	\d\().16b, \d\().16b,  \s2\().16b
.endm


.macro	eor3_m1 d s0 s1 s2
	eor3_m1_0	\d\(), \s0\(), \s1\(), \s2\()
	eor3_m1_1	\d\(), \s0\(), \s1\(), \s2\()
.endm

.macro	rax1_m1 d s0 s1
   // Use add instead of SHL #1
	add	vvtmp.2d, \s1\().2d, \s1\().2d
	sri	vvtmp.2d, \s1\().2d, #63
	eor	\d\().16b, vvtmp.16b, \s0\().16b
.endm

.macro	xar_m1 d s0 s1 imm
   // Special cases where we can replace SHLs by ADDs
.if	\imm == 63
	eor	\s0\().16b, \s0\().16b, \s1\().16b
	add	\d\().2d, \s0\().2d, \s0\().2d
	sri	\d\().2d, \s0\().2d, #(63)
.elseif	\imm == 62
	eor	\s0\().16b, \s0\().16b, \s1\().16b
	add	\d\().2d, \s0\().2d, \s0\().2d
	add	\d\().2d, \d\().2d,  \d\().2d
	sri	\d\().2d, \s0\().2d, #(62)
.else
	eor	\s0\().16b, \s0\().16b, \s1\().16b
	shl	\d\().2d, \s0\().2d, #(64-\imm)
	sri	\d\().2d, \s0\().2d, #(\imm)
.endif
.endm

.macro	xar_m1_0 d s0 s1 imm
   // Special cases where we can replace SHLs by ADDs
.if	\imm == 63
	eor	\s0\().16b, \s0\().16b, \s1\().16b
.elseif	\imm == 62
	eor	\s0\().16b, \s0\().16b, \s1\().16b
.else
	eor	\s0\().16b, \s0\().16b, \s1\().16b
.endif
.endm

.macro	xar_m1_1 d s0 s1 imm
   // Special cases where we can replace SHLs by ADDs
.if	\imm == 63
	add	\d\().2d, \s0\().2d, \s0\().2d
	sri	\d\().2d, \s0\().2d, #(63)
.elseif	\imm == 62
	add	\d\().2d, \s0\().2d, \s0\().2d
	add	\d\().2d, \d\().2d,  \d\().2d
	sri	\d\().2d, \s0\().2d, #(62)
.else
	shl	\d\().2d, \s0\().2d, #(64-\imm)
	sri	\d\().2d, \s0\().2d, #(\imm)
.endif
.endm

.macro	bcax_m1 d s0 s1 s2
	bic	vvtmp.16b, \s1\().16b, \s2\().16b
	eor	\d\().16b, vvtmp.16b, \s0\().16b
.endm

.macro	load_input_vector
	ldr	vAbaq, [input_addr, #(32*0)]
	ldr	vAbeq, [input_addr, #(32*0+32)]
	ldr	vAbiq, [input_addr, #(32*2)]
	ldr	vAboq, [input_addr, #(32*2+32)]
	ldr	vAbuq, [input_addr, #(32*4)]
	ldr	vAgaq, [input_addr, #(32*4+32)]
	ldr	vAgeq, [input_addr, #(32*6)]
	ldr	vAgiq, [input_addr, #(32*6+32)]
	ldr	vAgoq, [input_addr, #(32*8)]
	ldr	vAguq, [input_addr, #(32*8+32)]
	ldr	vAkaq, [input_addr, #(32*10)]
	ldr	vAkeq, [input_addr, #(32*10+32)]
	ldr	vAkiq, [input_addr, #(32*12)]
	ldr	vAkoq, [input_addr, #(32*12+32)]
	ldr	vAkuq, [input_addr, #(32*14)]
	ldr	vAmaq, [input_addr, #(32*14+32)]
	ldr	vAmeq, [input_addr, #(32*16)]
	ldr	vAmiq, [input_addr, #(32*16+32)]
	ldr	vAmoq, [input_addr, #(32*18)]
	ldr	vAmuq, [input_addr, #(32*18+32)]
	ldr	vAsaq, [input_addr, #(32*20)]
	ldr	vAseq, [input_addr, #(32*20+32)]
	ldr	vAsiq, [input_addr, #(32*22)]
	ldr	vAsoq, [input_addr, #(32*22+32)]
	ldr	vAsuq, [input_addr, #(32*24)]
.endm

.macro	store_input_vector
	str	vAbaq, [input_addr, #(32*0)]
	str	vAbeq, [input_addr, #(32*0+32)]
	str	vAbiq, [input_addr, #(32*2)]
	str	vAboq, [input_addr, #(32*2+32)]
	str	vAbuq, [input_addr, #(32*4)]
	str	vAgaq, [input_addr, #(32*4+32)]
	str	vAgeq, [input_addr, #(32*6)]
	str	vAgiq, [input_addr, #(32*6+32)]
	str	vAgoq, [input_addr, #(32*8)]
	str	vAguq, [input_addr, #(32*8+32)]
	str	vAkaq, [input_addr, #(32*10)]
	str	vAkeq, [input_addr, #(32*10+32)]
	str	vAkiq, [input_addr, #(32*12)]
	str	vAkoq, [input_addr, #(32*12+32)]
	str	vAkuq, [input_addr, #(32*14)]
	str	vAmaq, [input_addr, #(32*14+32)]
	str	vAmeq, [input_addr, #(32*16)]
	str	vAmiq, [input_addr, #(32*16+32)]
	str	vAmoq, [input_addr, #(32*18)]
	str	vAmuq, [input_addr, #(32*18+32)]
	str	vAsaq, [input_addr, #(32*20)]
	str	vAseq, [input_addr, #(32*20+32)]
	str	vAsiq, [input_addr, #(32*22)]
	str	vAsoq, [input_addr, #(32*22+32)]
	str	vAsuq, [input_addr, #(32*24)]
.endm

.macro	store_input_scalar
	str	s_Aba,[input_addr, 32*0 ]
	str	sAbe, [input_addr, 32*1 ]
	str	sAbi, [input_addr, 32*2 ]
	str	sAbo, [input_addr, 32*3 ]
	str	sAbu, [input_addr, 32*4 ]
	str	sAga, [input_addr, 32*5 ]
	str	sAge, [input_addr, 32*6 ]
	str	sAgi, [input_addr, 32*7 ]
	str	sAgo, [input_addr, 32*8 ]
	str	sAgu, [input_addr, 32*9 ]
	str	sAka, [input_addr, 32*10]
	str	sAke, [input_addr, 32*11]
	str	sAki, [input_addr, 32*12]
	str	sAko, [input_addr, 32*13]
	str	sAku, [input_addr, 32*14]
	str	sAma, [input_addr, 32*15]
	str	sAme, [input_addr, 32*16]
	str	sAmi, [input_addr, 32*17]
	str	sAmo, [input_addr, 32*18]
	str	sAmu, [input_addr, 32*19]
	str	sAsa, [input_addr, 32*20]
	str	sAse, [input_addr, 32*21]
	str	sAsi, [input_addr, 32*22]
	str	sAso, [input_addr, 32*23]
	str	sAsu, [input_addr, 32*24]
.endm

.macro	load_input_scalar
	ldr	s_Aba,[input_addr, 32*0 ]
	ldr	sAbe, [input_addr, 32*1 ]
	ldr	sAbi, [input_addr, 32*2 ]
	ldr	sAbo, [input_addr, 32*3 ]
	ldr	sAbu, [input_addr, 32*4 ]
	ldr	sAga, [input_addr, 32*5 ]
	ldr	sAge, [input_addr, 32*6 ]
	ldr	sAgi, [input_addr, 32*7 ]
	ldr	sAgo, [input_addr, 32*8 ]
	ldr	sAgu, [input_addr, 32*9 ]
	ldr	sAka, [input_addr, 32*10]
	ldr	sAke, [input_addr, 32*11]
	ldr	sAki, [input_addr, 32*12]
	ldr	sAko, [input_addr, 32*13]
	ldr	sAku, [input_addr, 32*14]
	ldr	sAma, [input_addr, 32*15]
	ldr	sAme, [input_addr, 32*16]
	ldr	sAmi, [input_addr, 32*17]
	ldr	sAmo, [input_addr, 32*18]
	ldr	sAmu, [input_addr, 32*19]
	ldr	sAsa, [input_addr, 32*20]
	ldr	sAse, [input_addr, 32*21]
	ldr	sAsi, [input_addr, 32*22]
	ldr	sAso, [input_addr, 32*23]
	ldr	sAsu, [input_addr, 32*24]
.endm

#define STACK_SIZE             (4*16 + 12*8 + 6*8 + 3*16)
#define STACK_BASE_VREGS       (0)
#define STACK_BASE_GPRS        (4*16)
#define STACK_BASE_TMP_GPRS    (4*16 + 12*8)
#define STACK_BASE_TMP_VREGS   (4*16 + 12*8 + 6*8)
#define STACK_OFFSET_INPUT     (0*8)
#define STACK_OFFSET_CONST     (1*8)
#define STACK_OFFSET_COUNT     (2*8)
#define STACK_OFFSET_COUNT_OUT (3*8)
#define STACK_OFFSET_CUR_INPUT (4*8)

#define vAgi_offset 0
#define vAga_offset 1
#define vAge_offset 2

.macro	save_gprs
	stp	x19, x20, [sp, #(STACK_BASE_GPRS + 16*0)]
	stp	x21, x22, [sp, #(STACK_BASE_GPRS + 16*1)]
	stp	x23, x24, [sp, #(STACK_BASE_GPRS + 16*2)]
	stp	x25, x26, [sp, #(STACK_BASE_GPRS + 16*3)]
	stp	x27, x28, [sp, #(STACK_BASE_GPRS + 16*4)]
	stp	x29, x30, [sp, #(STACK_BASE_GPRS + 16*5)]
.endm

.macro	restore_gprs
	ldp	x19, x20, [sp, #(STACK_BASE_GPRS + 16*0)]
	ldp	x21, x22, [sp, #(STACK_BASE_GPRS + 16*1)]
	ldp	x23, x24, [sp, #(STACK_BASE_GPRS + 16*2)]
	ldp	x25, x26, [sp, #(STACK_BASE_GPRS + 16*3)]
	ldp	x27, x28, [sp, #(STACK_BASE_GPRS + 16*4)]
	ldp	x29, x30, [sp, #(STACK_BASE_GPRS + 16*5)]
.endm

.macro	save_vregs
	stp	d8,  d9,  [sp,#(STACK_BASE_VREGS+0*16)]
	stp	d10, d11, [sp,#(STACK_BASE_VREGS+1*16)]
	stp	d12, d13, [sp,#(STACK_BASE_VREGS+2*16)]
	stp	d14, d15, [sp,#(STACK_BASE_VREGS+3*16)]
.endm

.macro	restore_vregs
	ldp	d14, d15, [sp,#(STACK_BASE_VREGS+3*16)]
	ldp	d12, d13, [sp,#(STACK_BASE_VREGS+2*16)]
	ldp	d10, d11, [sp,#(STACK_BASE_VREGS+1*16)]
	ldp	d8,  d9,  [sp,#(STACK_BASE_VREGS+0*16)]
.endm

.macro	alloc_stack
	sub	sp, sp, #(STACK_SIZE)
.endm

.macro	free_stack
	add	sp, sp, #(STACK_SIZE)
.endm

.macro	eor5 dst, src0, src1, src2, src3, src4
	eor	\d\()st, \src0, \src1
	eor	\d\()st, \d\()st,  \src2
	eor	\d\()st, \d\()st,  \src3
	eor	\d\()st, \d\()st,  \src4
.endm

.macro	xor_rol dst, src1, src0, imm
	eor	\d\()st, \src0, \src1, ROR  #(64-\imm)
.endm

.macro	bic_rol dst, src1, src0, imm
	bic	\d\()st, \src0, \src1, ROR  #(64-\imm)
.endm

.macro	rotate dst, src, imm
	ror	\d\()st, \src, #(64-\imm)
.endm

.macro	hybrid_round_initial
	eor	sC0, sAma, sAsa                             SEP      eor3_m1_0 C1,vAbe,vAge,vAke
	eor	sC1, sAme, sAse                             SEP
	eor	sC2, sAmi, sAsi                             SEP      eor3_m1_0 C3,vAbo,vAgo,vAko
	eor	sC3, sAmo, sAso                             SEP
	eor	sC4, sAmu, sAsu                             SEP      eor3_m1_0 C0,vAba,vAga,vAka
	eor	sC0, sAka, sC0                              SEP
	eor	sC1, sAke, sC1                              SEP      eor3_m1_0 C2,vAbi,vAgi,vAki
	eor	sC2, sAki, sC2                              SEP
	eor	sC3, sAko, sC3                              SEP      eor3_m1_0 C4,vAbu,vAgu,vAku
	eor	sC4, sAku, sC4                              SEP
	eor	sC0, sAga, sC0                              SEP      eor3_m1_1 C1,vAbe,vAge,vAke
	eor	sC1, sAge, sC1                              SEP      eor3_m1_1 C3,vAbo,vAgo,vAko
	eor	sC2, sAgi, sC2                              SEP
	eor	sC3, sAgo, sC3                              SEP      eor3_m1_1 C0,vAba,vAga,vAka
	eor	sC4, sAgu, sC4                              SEP
	eor	sC0, s_Aba, sC0                             SEP      eor3_m1_1 C2,vAbi,vAgi,vAki
	eor	sC1, sAbe, sC1                              SEP
	eor	sC2, sAbi, sC2                              SEP      eor3_m1_1 C4,vAbu,vAgu,vAku
	eor	sC3, sAbo, sC3                              SEP
	eor	sC4, sAbu, sC4                              SEP      eor3_m1_0 C1, C1,vAme, vAse
	eor	sE1, sC0, sC2, ROR #63                      SEP      eor3_m1_0 C3, C3,vAmo, vAso
	eor	sE3, sC2, sC4, ROR #63                      SEP
	eor	sE0, sC4, sC1, ROR #63                      SEP      eor3_m1_0 C0, C0,vAma, vAsa
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP      eor3_m1_0 C2, C2,vAmi, vAsi
	eor	s_Aba_, s_Aba, sE0                          SEP
	eor	sAsa_, sAbi, sE2                            SEP      eor3_m1_0 C4, C4,vAmu, vAsu
	eor	sAbi_, sAki, sE2                            SEP
	eor	sAki_, sAko, sE3                            SEP      eor3_m1_1 C1, C1,vAme, vAse
	eor	sAko_, sAmu, sE4                            SEP      eor3_m1_1 C3, C3,vAmo, vAso
	eor	sAmu_, sAso, sE3                            SEP
	eor	sAso_, sAma, sE0                            SEP      eor3_m1_1 C0, C0,vAma, vAsa
	eor	sAka_, sAbe, sE1                            SEP
	eor	sAse_, sAgo, sE3                            SEP      eor3_m1_1 C2, C2,vAmi, vAsi
	eor	sAgo_, sAme, sE1                            SEP
	eor	sAke_, sAgi, sE2                            SEP      eor3_m1_1 C4, C4,vAmu, vAsu
	eor	sAgi_, sAka, sE0                            SEP
	eor	sAga_, sAbo, sE3                            SEP      vvtmp .req vBba
	eor	sAbo_, sAmo, sE3                            SEP      rax1_m1 E2, C1, C3
	eor	sAmo_, sAmi, sE2                            SEP
	eor	sAmi_, sAke, sE1                            SEP      rax1_m1 E4, C3, C0
	eor	sAge_, sAgu, sE4                            SEP
	eor	sAgu_, sAsi, sE2                            SEP      rax1_m1 E1, C0, C2
	eor	sAsi_, sAku, sE4                            SEP
	eor	sAku_, sAsa, sE0                            SEP      rax1_m1 E3, C2, C4
	eor	sAma_, sAbu, sE4                            SEP
	eor	sAbu_, sAsu, sE4                            SEP      str vAgiq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	eor	sAsu_, sAse, sE1                            SEP      rax1_m1 E0, C4, C1
	eor	sAme_, sAga, sE0                            SEP
	eor	sAbe_, sAge, sE1                            SEP
	load_constant_ptr	SEP
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP      .unreq vvtmp
	eor	sAga, tmp,  sAga_, ROR #39                  SEP
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP      vvtmp .req C1
	eor	sAge, tmp,  sAge_, ROR #25                  SEP
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP      vvtmpq .req C1q
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP      xar_m1 vBgi, vAka, E0, 61
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP      xar_m1 vBga, vAbo, E3, 36
	bic	tmp, sAge_, sAga_, ROR #56                  SEP
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP      str vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	bic	tmp, sAki_, sAke_, ROR #19                  SEP
	eor	sAka, tmp,  sAka_, ROR #24                  SEP      xar_m1 vBbo, vAmo, E3, 43
	bic	tmp, sAko_, sAki_, ROR #47                  SEP
	eor	sAke, tmp,  sAke_, ROR #2                   SEP      xar_m1 vBmo, vAmi, E2, 49
	bic	tmp, sAku_, sAko_, ROR #10                  SEP      str vAgeq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAge_offset)]
	eor	sAki, tmp,  sAki_, ROR #57                  SEP
	bic	tmp, sAka_, sAku_, ROR #47                  SEP      xar_m1 vBmi, vAke, E1, 54
	eor	sAko, tmp,  sAko_, ROR #57                  SEP
	bic	tmp, sAke_, sAka_, ROR #5                   SEP      xar_m1 vBge, vAgu, E4, 44
	eor	sAku, tmp,  sAku_, ROR #52                  SEP
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP      bcax_m1 vAga, vBga, vBgi, vBge
	eor	sAma, tmp,  sAma_, ROR #47                  SEP
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP      eor vBba.16b, vAba.16b, E0.16b
	eor	sAme, tmp,  sAme_, ROR #43                  SEP
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP      xar_m1 vBsa, vAbi, E2, 2
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP      xar_m1 vBbi, vAki, E2, 21
	ldr	cur_const, [const_addr]                     SEP
	mov	count, #1                                   SEP      xar_m1 vBki, vAko, E3, 39
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP      xar_m1 vBko, vAmu, E4, 56
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP      xar_m1 vBmu, vAso, E3, 8
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP      xar_m1 vBso, vAma, E0, 23
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP      xar_m1 vBka, vAbe, E1, 63
	eor	sAse, tmp,  sAse_, ROR #50                  SEP
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP      xar_m1 vBse, vAgo, E3, 9
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP      xar_m1 vBgo, vAme, E1, 19
	eor	sAso, tmp,  sAso_, ROR #21                  SEP
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP      bcax_m1 vAge, vBge, vBgo, vBgi
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP      ldr vvtmpq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP      xar_m1 vBke, vvtmp, E2, 58
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP      xar_m1 vBgu, vAsi, E2, 3
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP      bcax_m1 vAgi, vBgi, vBgu, vBgo
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP      xar_m1 vBsi, vAku, E4, 25
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP      xar_m1 vBku, vAsa, E0, 46
	eor	s_Aba, s_Aba, cur_const                     SEP      xar_m1 vBma, vAbu, E4, 37
	str	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)] SEP
	eor	sC0, sAka, sAsa, ROR #50                    SEP      xar_m1 vBbu, vAsu, E4, 50
	eor	sC1, sAse, sAge, ROR #60                    SEP
	eor	sC2, sAmi, sAgi, ROR #59                    SEP      xar_m1 vBsu, vAse, E1, 62
	eor	sC3, sAgo, sAso, ROR #30                    SEP
	eor	sC4, sAbu, sAsu, ROR #53                    SEP      ldp vvtmpq, E3q, [sp, #(STACK_BASE_TMP_VREGS + 16*vAga_offset)]
	eor	sC0, sAma, sC0, ROR #49                     SEP
	eor	sC1, sAbe, sC1, ROR #44                     SEP      xar_m1 vBme, vvtmp, E0, 28
	eor	sC2, sAki, sC2, ROR #26                     SEP      xar_m1 vBbe, E3,  E1, 20
	eor	sC3, sAmo, sC3, ROR #63                     SEP
	eor	sC4, sAmu, sC4, ROR #56                     SEP
	eor	sC0, sAga, sC0, ROR #57                     SEP
	eor	sC1, sAme, sC1, ROR #58                     SEP      bcax_m1 vAgo, vBgo, vBga, vBgu
	eor	sC2, sAbi, sC2, ROR #60                     SEP
	eor	sC3, sAko, sC3, ROR #38                     SEP      bcax_m1 vAgu, vBgu, vBge, vBga
	eor	sC4, sAgu, sC4, ROR #48                     SEP
	eor	sC0, s_Aba, sC0, ROR #61                    SEP      bcax_m1 vAka, vBka, vBki, vBke
	eor	sC1, sAke, sC1, ROR #57                     SEP      bcax_m1 vAke, vBke, vBko, vBki
	eor	sC2, sAsi, sC2, ROR #52                     SEP
	eor	sC3, sAbo, sC3, ROR #63                     SEP      .unreq vvtmp
	eor	sC4, sAku, sC4, ROR #50                     SEP
	ror	sC1, sC1, 56                                SEP      .unreq vvtmpq
	ror	sC4, sC4, 58                                SEP
	ror	sC2, sC2, 62                                SEP      eor2    C0,  vAka, vAga
	eor	sE1, sC0, sC2, ROR #63                      SEP
	eor	sE3, sC2, sC4, ROR #63                      SEP      str vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	eor	sE0, sC4, sC1, ROR #63                      SEP      vvtmp .req vAga
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP      vvtmpq .req vAgaq
	eor	s_Aba_, sE0, s_Aba                          SEP
	eor	sAsa_, sE2, sAbi, ROR #50                   SEP      bcax_m1 vAki, vBki, vBku, vBko
	eor	sAbi_, sE2, sAki, ROR #46                   SEP
	eor	sAki_, sE3, sAko, ROR #63                   SEP      bcax_m1 vAko, vBko, vBka, vBku
	eor	sAko_, sE4, sAmu, ROR #28                   SEP
	eor	sAmu_, sE3, sAso, ROR #2                    SEP      eor2    C1,  vAke, vAge
	eor	sAso_, sE0, sAma, ROR #54                   SEP      bcax_m1 vAku, vBku, vBke, vBka
	eor	sAka_, sE1, sAbe, ROR #43                   SEP
	eor	sAse_, sE3, sAgo, ROR #36                   SEP      eor2    C2,  vAki, vAgi
	eor	sAgo_, sE1, sAme, ROR #49                   SEP
	eor	sAke_, sE2, sAgi, ROR #3                    SEP      bcax_m1 vAma, vBma, vBmi, vBme
	eor	sAgi_, sE0, sAka, ROR #39                   SEP
	eor	sAga_, sE3, sAbo                            SEP      eor2    C3,  vAko, vAgo
	eor	sAbo_, sE3, sAmo, ROR #37                   SEP
	eor	sAmo_, sE2, sAmi, ROR #8                    SEP      bcax_m1 vAme, vBme, vBmo, vBmi
	eor	sAmi_, sE1, sAke, ROR #56                   SEP
	eor	sAge_, sE4, sAgu, ROR #44                   SEP      eor2    C4,  vAku, vAgu
	eor	sAgu_, sE2, sAsi, ROR #62                   SEP      bcax_m1 vAmi, vBmi, vBmu, vBmo
	eor	sAsi_, sE4, sAku, ROR #58                   SEP
	eor	sAku_, sE0, sAsa, ROR #25                   SEP      eor2    C0,  C0,  vAma
	eor	sAma_, sE4, sAbu, ROR #20                   SEP
	eor	sAbu_, sE4, sAsu, ROR #9                    SEP      bcax_m1 vAmo, vBmo, vBma, vBmu
	eor	sAsu_, sE1, sAse, ROR #23                   SEP
	eor	sAme_, sE0, sAga, ROR #61                   SEP      eor2    C1,  C1,  vAme
	eor	sAbe_, sE1, sAge, ROR #19                   SEP
	load_constant_ptr	SEP      bcax_m1 vAmu, vBmu, vBme, vBma
	ldr	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]              SEP      eor2    C2,  C2,  vAmi
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP
	eor	sAga, tmp,  sAga_, ROR #39                  SEP      bcax_m1 vAsa, vBsa, vBsi, vBse
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP
	eor	sAge, tmp,  sAge_, ROR #25                  SEP      eor2    C3,  C3,  vAmo
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP      bcax_m1 vAse, vBse, vBso, vBsi
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP      eor2    C4,  C4,  vAmu
	bic	tmp, sAge_, sAga_, ROR #56                  SEP      bcax_m1 vAsi, vBsi, vBsu, vBso
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP
	bic	tmp, sAki_, sAke_, ROR #19                  SEP      eor2    C0,  C0,  vAsa
	eor	sAka, tmp,  sAka_, ROR #24                  SEP
	bic	tmp, sAko_, sAki_, ROR #47                  SEP      bcax_m1 vAso, vBso, vBsa, vBsu
	eor	sAke, tmp,  sAke_, ROR #2                   SEP
	bic	tmp, sAku_, sAko_, ROR #10                  SEP      eor2    C1,  C1,  vAse
	eor	sAki, tmp,  sAki_, ROR #57                  SEP
	bic	tmp, sAka_, sAku_, ROR #47                  SEP      bcax_m1 vAsu, vBsu, vBse, vBsa
	eor	sAko, tmp,  sAko_, ROR #57                  SEP      eor2    C2,  C2,  vAsi
	bic	tmp, sAke_, sAka_, ROR #5                   SEP
	eor	sAku, tmp,  sAku_, ROR #52                  SEP      eor2    C3,  C3,  vAso
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP
	eor	sAma, tmp,  sAma_, ROR #47                  SEP      bcax_m1 vAba, vBba, vBbi, vBbe
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP
	eor	sAme, tmp,  sAme_, ROR #43                  SEP      bcax_m1 vAbe, vBbe, vBbo, vBbi
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP      eor2    C1,  C1,  vAbe
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP      ldr x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP      ldr vvtmpq, [x26], #16
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP      str x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP
	ldr	cur_const, [const_addr, count, UXTW #3]     SEP
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP      eor vAba.16b, vAba.16b, vvtmp.16b
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP
	eor	sAse, tmp,  sAse_, ROR #50                  SEP      eor2    C4,  C4,  vAsu
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP      bcax_m1 vAbi, vBbi, vBbu, vBbo
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP      bcax_m1 vAbo, vBbo, vBba, vBbu
	eor	sAso, tmp,  sAso_, ROR #21                  SEP
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP      eor2    C3,  C3,  vAbo
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP      eor2    C2,  C2,  vAbi
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP      eor2    C0,  C0,  vAba
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP      bcax_m1 vAbu, vBbu, vBbe, vBba
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP      eor2    C4,  C4,  vAbu
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP      ldr vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP      .unreq vvtmp
	add	count, count, #1                            SEP
	eor	s_Aba, s_Aba, cur_const                     SEP      .unreq vvtmpq
.endm


.macro	hybrid_round_noninitial
	str	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]                  SEP
	eor	sC0, sAka, sAsa, ROR #50                    SEP      vvtmp .req vBba
	eor	sC1, sAse, sAge, ROR #60                    SEP      rax1_m1 E2, C1, C3
	eor	sC2, sAmi, sAgi, ROR #59                    SEP      rax1_m1 E4, C3, C0
	eor	sC3, sAgo, sAso, ROR #30                    SEP
	eor	sC4, sAbu, sAsu, ROR #53                    SEP
	eor	sC0, sAma, sC0, ROR #49                     SEP
	eor	sC1, sAbe, sC1, ROR #44                     SEP      rax1_m1 E1, C0, C2
	eor	sC2, sAki, sC2, ROR #26                     SEP
	eor	sC3, sAmo, sC3, ROR #63                     SEP
	eor	sC4, sAmu, sC4, ROR #56                     SEP      rax1_m1 E3, C2, C4
	eor	sC0, sAga, sC0, ROR #57                     SEP
	eor	sC1, sAme, sC1, ROR #58                     SEP      str vAgiq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	eor	sC2, sAbi, sC2, ROR #60                     SEP
	eor	sC3, sAko, sC3, ROR #38                     SEP      rax1_m1 E0, C4, C1
	eor	sC4, sAgu, sC4, ROR #48                     SEP
	eor	sC0, s_Aba, sC0, ROR #61                    SEP      .unreq vvtmp
	eor	sC1, sAke, sC1, ROR #57                     SEP
	eor	sC2, sAsi, sC2, ROR #52                     SEP
	eor	sC3, sAbo, sC3, ROR #63                     SEP      vvtmp .req C1
	eor	sC4, sAku, sC4, ROR #50                     SEP
	ror	sC1, sC1, 56                                SEP      vvtmpq .req C1q
	ror	sC4, sC4, 58                                SEP
	ror	sC2, sC2, 62                                SEP      xar_m1 vBgi, vAka, E0, 61
	eor	sE1, sC0, sC2, ROR #63                      SEP
	eor	sE3, sC2, sC4, ROR #63                      SEP      xar_m1 vBga, vAbo, E3, 36
	eor	sE0, sC4, sC1, ROR #63                      SEP
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP      str vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	eor	s_Aba_, sE0, s_Aba                          SEP
	eor	sAsa_, sE2, sAbi, ROR #50                   SEP      xar_m1 vBbo, vAmo, E3, 43
	eor	sAbi_, sE2, sAki, ROR #46                   SEP
	eor	sAki_, sE3, sAko, ROR #63                   SEP      xar_m1 vBmo, vAmi, E2, 49
	eor	sAko_, sE4, sAmu, ROR #28                   SEP
	eor	sAmu_, sE3, sAso, ROR #2                    SEP
	eor	sAso_, sE0, sAma, ROR #54                   SEP      str vAgeq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAge_offset)]
	eor	sAka_, sE1, sAbe, ROR #43                   SEP
	eor	sAse_, sE3, sAgo, ROR #36                   SEP      xar_m1 vBmi, vAke, E1, 54
	eor	sAgo_, sE1, sAme, ROR #49                   SEP
	eor	sAke_, sE2, sAgi, ROR #3                    SEP      xar_m1 vBge, vAgu, E4, 44
	eor	sAgi_, sE0, sAka, ROR #39                   SEP
	eor	sAga_, sE3, sAbo                            SEP      bcax_m1 vAga, vBga, vBgi, vBge
	eor	sAbo_, sE3, sAmo, ROR #37                   SEP
	eor	sAmo_, sE2, sAmi, ROR #8                    SEP
	eor	sAmi_, sE1, sAke, ROR #56                   SEP      eor vBba.16b, vAba.16b, E0.16b
	eor	sAge_, sE4, sAgu, ROR #44                   SEP
	eor	sAgu_, sE2, sAsi, ROR #62                   SEP      xar_m1 vBsa, vAbi, E2, 2
	eor	sAsi_, sE4, sAku, ROR #58                   SEP
	eor	sAku_, sE0, sAsa, ROR #25                   SEP      xar_m1 vBbi, vAki, E2, 21
	eor	sAma_, sE4, sAbu, ROR #20                   SEP
	eor	sAbu_, sE4, sAsu, ROR #9                    SEP      xar_m1 vBki, vAko, E3, 39
	eor	sAsu_, sE1, sAse, ROR #23                   SEP
	eor	sAme_, sE0, sAga, ROR #61                   SEP
	eor	sAbe_, sE1, sAge, ROR #19                   SEP      xar_m1 vBko, vAmu, E4, 56
	load_constant_ptr	SEP
	ldr	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]                SEP      xar_m1 vBmu, vAso, E3, 8
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP
	eor	sAga, tmp,  sAga_, ROR #39                  SEP      xar_m1 vBso, vAma, E0, 23
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP
	eor	sAge, tmp,  sAge_, ROR #25                  SEP
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP      xar_m1 vBka, vAbe, E1, 63
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP      xar_m1 vBse, vAgo, E3, 9
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP
	bic	tmp, sAge_, sAga_, ROR #56                  SEP      xar_m1 vBgo, vAme, E1, 19
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP
	bic	tmp, sAki_, sAke_, ROR #19                  SEP      bcax_m1 vAge, vBge, vBgo, vBgi
	eor	sAka, tmp,  sAka_, ROR #24                  SEP
	bic	tmp, sAko_, sAki_, ROR #47                  SEP
	eor	sAke, tmp,  sAke_, ROR #2                   SEP      ldr vvtmpq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	bic	tmp, sAku_, sAko_, ROR #10                  SEP
	eor	sAki, tmp,  sAki_, ROR #57                  SEP      xar_m1 vBke, vvtmp, E2, 58
	bic	tmp, sAka_, sAku_, ROR #47                  SEP
	eor	sAko, tmp,  sAko_, ROR #57                  SEP      xar_m1 vBgu, vAsi, E2, 3
	bic	tmp, sAke_, sAka_, ROR #5                   SEP
	eor	sAku, tmp,  sAku_, ROR #52                  SEP      bcax_m1 vAgi, vBgi, vBgu, vBgo
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP
	eor	sAma, tmp,  sAma_, ROR #47                  SEP
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP      xar_m1 vBsi, vAku, E4, 25
	eor	sAme, tmp,  sAme_, ROR #43                  SEP
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP      xar_m1 vBku, vAsa, E0, 46
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP      xar_m1 vBma, vAbu, E4, 37
	ldr	cur_const, [const_addr, count, UXTW #3]     SEP
	add	count, count, #1                            SEP
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP      xar_m1 vBbu, vAsu, E4, 50
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP      xar_m1 vBsu, vAse, E1, 62
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP      ldp vvtmpq, E3q, [sp, #(STACK_BASE_TMP_VREGS + 16*vAga_offset)]
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP
	eor	sAse, tmp,  sAse_, ROR #50                  SEP      xar_m1 vBme, vvtmp, E0, 28
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP      xar_m1 vBbe, E3,  E1, 20
	eor	sAso, tmp,  sAso_, ROR #21                  SEP
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP      bcax_m1 vAgo, vBgo, vBga, vBgu
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP      bcax_m1 vAgu, vBgu, vBge, vBga
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP      bcax_m1 vAka, vBka, vBki, vBke
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP      bcax_m1 vAke, vBke, vBko, vBki
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP      .unreq vvtmp
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP      .unreq vvtmpq
	eor	s_Aba, s_Aba, cur_const                     SEP
	str	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]                  SEP
	eor	sC0, sAka, sAsa, ROR #50                    SEP      eor2    C0,  vAka, vAga
	eor	sC1, sAse, sAge, ROR #60                    SEP
	eor	sC2, sAmi, sAgi, ROR #59                    SEP      str vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	eor	sC3, sAgo, sAso, ROR #30                    SEP
	eor	sC4, sAbu, sAsu, ROR #53                    SEP      vvtmp .req vAga
	eor	sC0, sAma, sC0, ROR #49                     SEP
	eor	sC1, sAbe, sC1, ROR #44                     SEP      vvtmpq .req vAgaq
	eor	sC2, sAki, sC2, ROR #26                     SEP
	eor	sC3, sAmo, sC3, ROR #63                     SEP
	eor	sC4, sAmu, sC4, ROR #56                     SEP      bcax_m1 vAki, vBki, vBku, vBko
	eor	sC0, sAga, sC0, ROR #57                     SEP
	eor	sC1, sAme, sC1, ROR #58                     SEP      bcax_m1 vAko, vBko, vBka, vBku
	eor	sC2, sAbi, sC2, ROR #60                     SEP
	eor	sC3, sAko, sC3, ROR #38                     SEP      eor2    C1,  vAke, vAge
	eor	sC4, sAgu, sC4, ROR #48                     SEP
	eor	sC0, s_Aba, sC0, ROR #61                    SEP      bcax_m1 vAku, vBku, vBke, vBka
	eor	sC1, sAke, sC1, ROR #57                     SEP
	eor	sC2, sAsi, sC2, ROR #52                     SEP
	eor	sC3, sAbo, sC3, ROR #63                     SEP      eor2    C2,  vAki, vAgi
	eor	sC4, sAku, sC4, ROR #50                     SEP
	ror	sC1, sC1, 56                                SEP      bcax_m1 vAma, vBma, vBmi, vBme
	ror	sC4, sC4, 58                                SEP
	ror	sC2, sC2, 62                                SEP      eor2    C3,  vAko, vAgo
	eor	sE1, sC0, sC2, ROR #63                      SEP
	eor	sE3, sC2, sC4, ROR #63                      SEP      bcax_m1 vAme, vBme, vBmo, vBmi
	eor	sE0, sC4, sC1, ROR #63                      SEP
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP      eor2    C4,  vAku, vAgu
	eor	s_Aba_, sE0, s_Aba                          SEP
	eor	sAsa_, sE2, sAbi, ROR #50                   SEP      bcax_m1 vAmi, vBmi, vBmu, vBmo
	eor	sAbi_, sE2, sAki, ROR #46                   SEP
	eor	sAki_, sE3, sAko, ROR #63                   SEP      eor2    C0,  C0,  vAma
	eor	sAko_, sE4, sAmu, ROR #28                   SEP
	eor	sAmu_, sE3, sAso, ROR #2                    SEP
	eor	sAso_, sE0, sAma, ROR #54                   SEP      bcax_m1 vAmo, vBmo, vBma, vBmu
	eor	sAka_, sE1, sAbe, ROR #43                   SEP
	eor	sAse_, sE3, sAgo, ROR #36                   SEP      eor2    C1,  C1,  vAme
	eor	sAgo_, sE1, sAme, ROR #49                   SEP
	eor	sAke_, sE2, sAgi, ROR #3                    SEP      bcax_m1 vAmu, vBmu, vBme, vBma
	eor	sAgi_, sE0, sAka, ROR #39                   SEP
	eor	sAga_, sE3, sAbo                            SEP      eor2    C2,  C2,  vAmi
	eor	sAbo_, sE3, sAmo, ROR #37                   SEP
	eor	sAmo_, sE2, sAmi, ROR #8                    SEP
	eor	sAmi_, sE1, sAke, ROR #56                   SEP      bcax_m1 vAsa, vBsa, vBsi, vBse
	eor	sAge_, sE4, sAgu, ROR #44                   SEP
	eor	sAgu_, sE2, sAsi, ROR #62                   SEP      eor2    C3,  C3,  vAmo
	eor	sAsi_, sE4, sAku, ROR #58                   SEP
	eor	sAku_, sE0, sAsa, ROR #25                   SEP      bcax_m1 vAse, vBse, vBso, vBsi
	eor	sAma_, sE4, sAbu, ROR #20                   SEP
	eor	sAbu_, sE4, sAsu, ROR #9                    SEP      eor2    C4,  C4,  vAmu
	eor	sAsu_, sE1, sAse, ROR #23                   SEP
	eor	sAme_, sE0, sAga, ROR #61                   SEP
	eor	sAbe_, sE1, sAge, ROR #19                   SEP      bcax_m1 vAsi, vBsi, vBsu, vBso
	load_constant_ptr	SEP
	ldr	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]               SEP      eor2    C0,  C0,  vAsa
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP
	eor	sAga, tmp,  sAga_, ROR #39                  SEP      bcax_m1 vAso, vBso, vBsa, vBsu
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP
	eor	sAge, tmp,  sAge_, ROR #25                  SEP
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP      eor2    C1,  C1,  vAse
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP      bcax_m1 vAsu, vBsu, vBse, vBsa
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP
	bic	tmp, sAge_, sAga_, ROR #56                  SEP      eor2    C2,  C2,  vAsi
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP
	bic	tmp, sAki_, sAke_, ROR #19                  SEP      eor2    C3,  C3,  vAso
	eor	sAka, tmp,  sAka_, ROR #24                  SEP
	bic	tmp, sAko_, sAki_, ROR #47                  SEP
	eor	sAke, tmp,  sAke_, ROR #2                   SEP      bcax_m1 vAba, vBba, vBbi, vBbe
	bic	tmp, sAku_, sAko_, ROR #10                  SEP
	eor	sAki, tmp,  sAki_, ROR #57                  SEP      bcax_m1 vAbe, vBbe, vBbo, vBbi
	bic	tmp, sAka_, sAku_, ROR #47                  SEP
	eor	sAko, tmp,  sAko_, ROR #57                  SEP      eor2    C1,  C1,  vAbe
	bic	tmp, sAke_, sAka_, ROR #5                   SEP
	eor	sAku, tmp,  sAku_, ROR #52                  SEP      ldr x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP
	eor	sAma, tmp,  sAma_, ROR #47                  SEP
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP      ldr vvtmpq, [x26], #16
	eor	sAme, tmp,  sAme_, ROR #43                  SEP
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP      str x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP      eor vAba.16b, vAba.16b, vvtmp.16b
	ldr	cur_const, [const_addr, count, UXTW #3]     SEP
	add	count, count, #1                            SEP
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP      eor2    C4,  C4,  vAsu
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP      bcax_m1 vAbi, vBbi, vBbu, vBbo
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP      bcax_m1 vAbo, vBbo, vBba, vBbu
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP
	eor	sAse, tmp,  sAse_, ROR #50                  SEP      eor2    C3,  C3,  vAbo
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP      eor2    C2,  C2,  vAbi
	eor	sAso, tmp,  sAso_, ROR #21                  SEP
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP      eor2    C0,  C0,  vAba
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP      bcax_m1 vAbu, vBbu, vBbe, vBba
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP      eor2    C4,  C4,  vAbu
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP      ldr vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP      .unreq vvtmp
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP      .unreq vvtmpq
	eor	s_Aba, s_Aba, cur_const                     SEP
.endm
.macro	hybrid_round_final
	SEP	vvtmp .req vBba
	str	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]                 SEP      rax1_m1 E2, C1, C3
	eor	sC0, sAka, sAsa, ROR #50                    SEP
	eor	sC1, sAse, sAge, ROR #60                    SEP      rax1_m1 E4, C3, C0
	eor	sC2, sAmi, sAgi, ROR #59                    SEP
	eor	sC3, sAgo, sAso, ROR #30                    SEP      rax1_m1 E1, C0, C2
	eor	sC4, sAbu, sAsu, ROR #53                    SEP
	eor	sC0, sAma, sC0, ROR #49                     SEP
	eor	sC1, sAbe, sC1, ROR #44                     SEP
	eor	sC2, sAki, sC2, ROR #26                     SEP
	eor	sC3, sAmo, sC3, ROR #63                     SEP
	eor	sC4, sAmu, sC4, ROR #56                     SEP
	eor	sC0, sAga, sC0, ROR #57                     SEP
	eor	sC1, sAme, sC1, ROR #58                     SEP
	eor	sC2, sAbi, sC2, ROR #60                     SEP
	eor	sC3, sAko, sC3, ROR #38                     SEP      rax1_m1 E3, C2, C4
	eor	sC4, sAgu, sC4, ROR #48                     SEP
	eor	sC0, s_Aba, sC0, ROR #61                    SEP
	eor	sC1, sAke, sC1, ROR #57                     SEP
	eor	sC2, sAsi, sC2, ROR #52                     SEP      str vAgiq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	eor	sC3, sAbo, sC3, ROR #63                     SEP
	eor	sC4, sAku, sC4, ROR #50                     SEP
	ror	sC1, sC1, 56                                SEP      rax1_m1 E0, C4, C1
	ror	sC4, sC4, 58                                SEP
	ror	sC2, sC2, 62                                SEP
	eor	sE1, sC0, sC2, ROR #63                      SEP
	eor	sE3, sC2, sC4, ROR #63                      SEP      .unreq vvtmp
	eor	sE0, sC4, sC1, ROR #63                      SEP
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP      vvtmp .req C1
	eor	s_Aba_, sE0, s_Aba                          SEP
	eor	sAsa_, sE2, sAbi, ROR #50                   SEP
	eor	sAbi_, sE2, sAki, ROR #46                   SEP      vvtmpq .req C1q
	eor	sAki_, sE3, sAko, ROR #63                   SEP
	eor	sAko_, sE4, sAmu, ROR #28                   SEP
	eor	sAmu_, sE3, sAso, ROR #2                    SEP
	eor	sAso_, sE0, sAma, ROR #54                   SEP      xar_m1 vBgi, vAka, E0, 61
	eor	sAka_, sE1, sAbe, ROR #43                   SEP
	eor	sAse_, sE3, sAgo, ROR #36                   SEP
	eor	sAgo_, sE1, sAme, ROR #49                   SEP      xar_m1 vBga, vAbo, E3, 36
	eor	sAke_, sE2, sAgi, ROR #3                    SEP
	eor	sAgi_, sE0, sAka, ROR #39                   SEP
	eor	sAga_, sE3, sAbo                            SEP
	eor	sAbo_, sE3, sAmo, ROR #37                   SEP      str vAgaq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAga_offset)]
	eor	sAmo_, sE2, sAmi, ROR #8                    SEP
	eor	sAmi_, sE1, sAke, ROR #56                   SEP
	eor	sAge_, sE4, sAgu, ROR #44                   SEP      xar_m1 vBbo, vAmo, E3, 43
	eor	sAgu_, sE2, sAsi, ROR #62                   SEP
	eor	sAsi_, sE4, sAku, ROR #58                   SEP
	eor	sAku_, sE0, sAsa, ROR #25                   SEP
	eor	sAma_, sE4, sAbu, ROR #20                   SEP      xar_m1 vBmo, vAmi, E2, 49
	eor	sAbu_, sE4, sAsu, ROR #9                    SEP
	eor	sAsu_, sE1, sAse, ROR #23                   SEP
	eor	sAme_, sE0, sAga, ROR #61                   SEP      str vAgeq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAge_offset)]
	eor	sAbe_, sE1, sAge, ROR #19                   SEP
	load_constant_ptr	SEP
	ldr	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]               SEP
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP      xar_m1 vBmi, vAke, E1, 54
	eor	sAga, tmp,  sAga_, ROR #39                  SEP
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP
	eor	sAge, tmp,  sAge_, ROR #25                  SEP      xar_m1 vBge, vAgu, E4, 44
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP      bcax_m1 vAga, vBga, vBgi, vBge
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP
	bic	tmp, sAge_, sAga_, ROR #56                  SEP
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP
	bic	tmp, sAki_, sAke_, ROR #19                  SEP      eor vBba.16b, vAba.16b, E0.16b
	eor	sAka, tmp,  sAka_, ROR #24                  SEP
	bic	tmp, sAko_, sAki_, ROR #47                  SEP
	eor	sAke, tmp,  sAke_, ROR #2                   SEP      xar_m1 vBsa, vAbi, E2, 2
	bic	tmp, sAku_, sAko_, ROR #10                  SEP
	eor	sAki, tmp,  sAki_, ROR #57                  SEP
	bic	tmp, sAka_, sAku_, ROR #47                  SEP
	eor	sAko, tmp,  sAko_, ROR #57                  SEP      xar_m1 vBbi, vAki, E2, 21
	bic	tmp, sAke_, sAka_, ROR #5                   SEP
	eor	sAku, tmp,  sAku_, ROR #52                  SEP
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP      xar_m1 vBki, vAko, E3, 39
	eor	sAma, tmp,  sAma_, ROR #47                  SEP
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP
	eor	sAme, tmp,  sAme_, ROR #43                  SEP
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP      xar_m1 vBko, vAmu, E4, 56
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP
	ldr	cur_const, [const_addr, count, UXTW #3]     SEP      xar_m1 vBmu, vAso, E3, 8
	add	count, count, #1                            SEP
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP      xar_m1 vBso, vAma, E0, 23
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP      xar_m1 vBka, vAbe, E1, 63
	eor	sAse, tmp,  sAse_, ROR #50                  SEP
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP      xar_m1 vBse, vAgo, E3, 9
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP
	eor	sAso, tmp,  sAso_, ROR #21                  SEP
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP      xar_m1 vBgo, vAme, E1, 19
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP      bcax_m1 vAge, vBge, vBgo, vBgi
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP      ldr vvtmpq, [sp, #(STACK_BASE_TMP_VREGS + 16 * vAgi_offset)]
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP      xar_m1 vBke, vvtmp, E2, 58
	eor	s_Aba, s_Aba, cur_const                     SEP
	str	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]                  SEP
	eor	sC0, sAka, sAsa, ROR #50                    SEP
	eor	sC1, sAse, sAge, ROR #60                    SEP      xar_m1 vBgu, vAsi, E2, 3
	eor	sC2, sAmi, sAgi, ROR #59                    SEP
	eor	sC3, sAgo, sAso, ROR #30                    SEP
	eor	sC4, sAbu, sAsu, ROR #53                    SEP      bcax_m1 vAgi, vBgi, vBgu, vBgo
	eor	sC0, sAma, sC0, ROR #49                     SEP
	eor	sC1, sAbe, sC1, ROR #44                     SEP
	eor	sC2, sAki, sC2, ROR #26                     SEP
	eor	sC3, sAmo, sC3, ROR #63                     SEP      xar_m1 vBsi, vAku, E4, 25
	eor	sC4, sAmu, sC4, ROR #56                     SEP
	eor	sC0, sAga, sC0, ROR #57                     SEP
	eor	sC1, sAme, sC1, ROR #58                     SEP      xar_m1 vBku, vAsa, E0, 46
	eor	sC2, sAbi, sC2, ROR #60                     SEP
	eor	sC3, sAko, sC3, ROR #38                     SEP
	eor	sC4, sAgu, sC4, ROR #48                     SEP      xar_m1 vBma, vAbu, E4, 37
	eor	sC0, s_Aba, sC0, ROR #61                    SEP
	eor	sC1, sAke, sC1, ROR #57                     SEP
	eor	sC2, sAsi, sC2, ROR #52                     SEP
	eor	sC3, sAbo, sC3, ROR #63                     SEP      xar_m1 vBbu, vAsu, E4, 50
	eor	sC4, sAku, sC4, ROR #50                     SEP
	ror	sC1, sC1, 56                                SEP
	ror	sC4, sC4, 58                                SEP      xar_m1 vBsu, vAse, E1, 62
	ror	sC2, sC2, 62                                SEP
	eor	sE1, sC0, sC2, ROR #63                      SEP
	eor	sE3, sC2, sC4, ROR #63                      SEP
	eor	sE0, sC4, sC1, ROR #63                      SEP      ldp vvtmpq, E3q, [sp, #(STACK_BASE_TMP_VREGS + 16*vAga_offset)]
	eor	sE2, sC1, sC3, ROR #63                      SEP
	eor	sE4, sC3, sC0, ROR #63                      SEP
	eor	s_Aba_, sE0, s_Aba                          SEP      xar_m1 vBme, vvtmp, E0, 28
	eor	sAsa_, sE2, sAbi, ROR #50                   SEP
	eor	sAbi_, sE2, sAki, ROR #46                   SEP
	eor	sAki_, sE3, sAko, ROR #63                   SEP
	eor	sAko_, sE4, sAmu, ROR #28                   SEP      xar_m1 vBbe, E3,  E1, 20
	eor	sAmu_, sE3, sAso, ROR #2                    SEP
	eor	sAso_, sE0, sAma, ROR #54                   SEP
	eor	sAka_, sE1, sAbe, ROR #43                   SEP      bcax_m1 vAgo, vBgo, vBga, vBgu
	eor	sAse_, sE3, sAgo, ROR #36                   SEP
	eor	sAgo_, sE1, sAme, ROR #49                   SEP
	eor	sAke_, sE2, sAgi, ROR #3                    SEP
	eor	sAgi_, sE0, sAka, ROR #39                   SEP      bcax_m1 vAgu, vBgu, vBge, vBga
	eor	sAga_, sE3, sAbo                            SEP
	eor	sAbo_, sE3, sAmo, ROR #37                   SEP
	eor	sAmo_, sE2, sAmi, ROR #8                    SEP      bcax_m1 vAka, vBka, vBki, vBke
	eor	sAmi_, sE1, sAke, ROR #56                   SEP
	eor	sAge_, sE4, sAgu, ROR #44                   SEP
	eor	sAgu_, sE2, sAsi, ROR #62                   SEP      bcax_m1 vAke, vBke, vBko, vBki
	eor	sAsi_, sE4, sAku, ROR #58                   SEP
	eor	sAku_, sE0, sAsa, ROR #25                   SEP
	eor	sAma_, sE4, sAbu, ROR #20                   SEP
	eor	sAbu_, sE4, sAsu, ROR #9                    SEP      bcax_m1 vAki, vBki, vBku, vBko
	eor	sAsu_, sE1, sAse, ROR #23                   SEP
	eor	sAme_, sE0, sAga, ROR #61                   SEP
	eor	sAbe_, sE1, sAge, ROR #19                   SEP      bcax_m1 vAko, vBko, vBka, vBku
	load_constant_ptr	SEP
	ldr	count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT)]               SEP
	bic	tmp, sAgi_, sAge_, ROR #47                  SEP
	eor	sAga, tmp,  sAga_, ROR #39                  SEP      bcax_m1 vAku, vBku, vBke, vBka
	bic	tmp, sAgo_, sAgi_, ROR #42                  SEP
	eor	sAge, tmp,  sAge_, ROR #25                  SEP
	bic	tmp, sAgu_, sAgo_, ROR #16                  SEP      bcax_m1 vAma, vBma, vBmi, vBme
	eor	sAgi, tmp,  sAgi_, ROR #58                  SEP
	bic	tmp, sAga_, sAgu_, ROR #31                  SEP
	eor	sAgo, tmp,  sAgo_, ROR #47                  SEP
	bic	tmp, sAge_, sAga_, ROR #56                  SEP      bcax_m1 vAme, vBme, vBmo, vBmi
	eor	sAgu, tmp,  sAgu_, ROR #23                  SEP
	bic	tmp, sAki_, sAke_, ROR #19                  SEP
	eor	sAka, tmp,  sAka_, ROR #24                  SEP      bcax_m1 vAmi, vBmi, vBmu, vBmo
	bic	tmp, sAko_, sAki_, ROR #47                  SEP
	eor	sAke, tmp,  sAke_, ROR #2                   SEP
	bic	tmp, sAku_, sAko_, ROR #10                  SEP
	eor	sAki, tmp,  sAki_, ROR #57                  SEP      bcax_m1 vAmo, vBmo, vBma, vBmu
	bic	tmp, sAka_, sAku_, ROR #47                  SEP
	eor	sAko, tmp,  sAko_, ROR #57                  SEP
	bic	tmp, sAke_, sAka_, ROR #5                   SEP      bcax_m1 vAmu, vBmu, vBme, vBma
	eor	sAku, tmp,  sAku_, ROR #52                  SEP
	bic	tmp, sAmi_, sAme_, ROR #38                  SEP
	eor	sAma, tmp,  sAma_, ROR #47                  SEP      bcax_m1 vAsa, vBsa, vBsi, vBse
	bic	tmp, sAmo_, sAmi_, ROR #5                   SEP
	eor	sAme, tmp,  sAme_, ROR #43                  SEP
	bic	tmp, sAmu_, sAmo_, ROR #41                  SEP
	eor	sAmi, tmp,  sAmi_, ROR #46                  SEP      bcax_m1 vAse, vBse, vBso, vBsi
	bic	tmp, sAma_, sAmu_, ROR #35                  SEP
	ldr	cur_const, [const_addr, count, UXTW #3]     SEP
	add	count, count, #1                            SEP      bcax_m1 vAsi, vBsi, vBsu, vBso
	eor	sAmo, tmp,  sAmo_, ROR #12                  SEP
	bic	tmp, sAme_, sAma_, ROR #9                   SEP
	eor	sAmu, tmp,  sAmu_, ROR #44                  SEP
	bic	tmp, sAsi_, sAse_, ROR #48                  SEP      bcax_m1 vAso, vBso, vBsa, vBsu
	eor	sAsa, tmp,  sAsa_, ROR #41                  SEP
	bic	tmp, sAso_, sAsi_, ROR #2                   SEP
	eor	sAse, tmp,  sAse_, ROR #50                  SEP      bcax_m1 vAsu, vBsu, vBse, vBsa
	bic	tmp, sAsu_, sAso_, ROR #25                  SEP
	eor	sAsi, tmp,  sAsi_, ROR #27                  SEP
	bic	tmp, sAsa_, sAsu_, ROR #60                  SEP
	eor	sAso, tmp,  sAso_, ROR #21                  SEP      bcax_m1 vAba, vBba, vBbi, vBbe
	bic	tmp, sAse_, sAsa_, ROR #57                  SEP
	eor	sAsu, tmp,  sAsu_, ROR #53                  SEP
	bic	tmp, sAbi_, sAbe_, ROR #63                  SEP      bcax_m1 vAbe, vBbe, vBbo, vBbi
	eor	s_Aba, s_Aba_, tmp,  ROR #21                SEP
	bic	tmp, sAbo_, sAbi_, ROR #42                  SEP
	eor	sAbe, tmp,  sAbe_, ROR #41                  SEP
	bic	tmp, sAbu_, sAbo_, ROR #57                  SEP      bcax_m1 vAbi, vBbi, vBbu, vBbo
	eor	sAbi, tmp,  sAbi_, ROR #35                  SEP
	bic	tmp, s_Aba_, sAbu_, ROR #50                 SEP
	eor	sAbo, tmp,  sAbo_, ROR #43                  SEP      bcax_m1 vAbo, vBbo, vBba, vBbu
	bic	tmp, sAbe_, s_Aba_, ROR #44                 SEP
	eor	sAbu, tmp,  sAbu_, ROR #30                  SEP
	eor	s_Aba, s_Aba, cur_const                     SEP      bcax_m1 vAbu, vBbu, vBbe, vBba
	ror	sAga, sAga,(64-3)                           SEP
	ror	sAka, sAka,(64-25)                          SEP
	ror	sAma, sAma,(64-10)                          SEP
	ror	sAsa, sAsa,(64-39)                          SEP      ldr x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	ror	sAbe, sAbe,(64-21)                          SEP
	ror	sAge, sAge,(64-45)                          SEP
	ror	sAke, sAke,(64-8)                           SEP      ldr vvtmpq, [x26], #16
	ror	sAme, sAme,(64-15)                          SEP
	ror	sAse, sAse,(64-41)                          SEP
	ror	sAbi, sAbi,(64-14)                          SEP
	ror	sAgi, sAgi,(64-61)                          SEP      str x26, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]
	ror	sAki, sAki,(64-18)                          SEP
	ror	sAmi, sAmi,(64-56)                          SEP
	ror	sAsi, sAsi,(64-2)                           SEP      eor vAba.16b, vAba.16b, vvtmp.16b
	ror	sAgo, sAgo,(64-28)                          SEP
	ror	sAko, sAko,(64-1)                           SEP
	ror	sAmo, sAmo,(64-27)                          SEP
	ror	sAso, sAso,(64-62)                          SEP      .unreq vvtmp
	ror	sAbu, sAbu,(64-44)                          SEP
	ror	sAgu, sAgu,(64-20)                          SEP
	ror	sAku, sAku,(64-6)                           SEP      .unreq vvtmpq
	ror	sAmu, sAmu,(64-36)                          SEP
	ror	sAsu, sAsu,(64-55)                          SEP
.endm


#define KECCAK_F1600_ROUNDS 24

.globl	keccak_f1600_x4_hybrid_asm_v5p
.hidden	keccak_f1600_x4_hybrid_asm_v5p
.globl	_keccak_f1600_x4_hybrid_asm_v5p
.hidden	_keccak_f1600_x4_hybrid_asm_v5p
.text
.align	4

keccak_f1600_x4_hybrid_asm_v5p:
_keccak_f1600_x4_hybrid_asm_v5p:
	alloc_stack
	save_gprs
	save_vregs
	str	input_addr, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_INPUT)]

	adr	const_addr, round_constants_vec
	str	const_addr, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CONST)]

	load_input_vector

	add	input_addr, input_addr, #16

	mov	out_count, #0
outer_loop:
	str	out_count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT_OUT)]

	load_input_scalar
	str	input_addr, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CUR_INPUT)]

	hybrid_round_initial
1:
	hybrid_round_noninitial
	cmp	count, #(KECCAK_F1600_ROUNDS-3)
	blt	1b
	hybrid_round_final

	ldr	input_addr, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_CUR_INPUT)]
	store_input_scalar
	add	input_addr, input_addr, #8

	ldr	out_count, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_COUNT_OUT)]
	add	out_count, out_count, #1
	cmp	out_count, #2
	blt	outer_loop

	ldr	input_addr, [sp, #(STACK_BASE_TMP_GPRS + STACK_OFFSET_INPUT)]
	store_input_vector

	restore_vregs
	restore_gprs
	free_stack
	ret
.byte	75,101,99,99,97,107,45,49,54,48,48,32,97,98,115,111,114,98,32,97,110,100,32,115,113,117,101,101,122,101,32,102,111,114,32,65,82,77,118,56,44,32,67,82,89,80,84,79,71,65,77,83,32,98,121,32,60,97,112,112,114,111,64,111,112,101,110,115,115,108,46,111,114,103,62,0
.align	2
#endif  // !OPENSSL_NO_ASM && defined(__AARCH64EL__) && defined(__ELF__)
#if defined(__ELF__)
// See https://www.airs.com/blog/archives/518.
.section .note.GNU-stack,"",%progbits
#endif
